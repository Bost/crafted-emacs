This is crafted-emacs.info, produced by makeinfo version 7.0.3 from
crafted-emacs.texi.

Copyright © 2022 System Crafters Community

     Permission is hereby granted, free of charge, to any person
     obtaining a copy of this software and associated documentation
     files (the "Software"), to deal in the Software without
     restriction, including without limitation the rights to use, copy,
     modify, merge, publish, distribute, sublicense, and/or sell copies
     of the Software, and to permit persons to whom the Software is
     furnished to do so, subject to the following conditions:

     The above copyright notice and this permission notice shall be
     included in all copies or substantial portions of the Software.

     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
     EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
     MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
     NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
     HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
     WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
     DEALINGS IN THE SOFTWARE.

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Crafted Emacs: (crafted-emacs). A sensible starting point for hacking your own Emacs configuration.
END-INFO-DIR-ENTRY


File: crafted-emacs.info,  Node: Top,  Next: Goals,  Up: (dir)

Crafted Emacs
*************

Hacking one’s Emacs configuration is, for some, an ongoing endeavor.
For others, it just needs to work.  Other configuration packages attempt
to be a complete, canned, working configuration, while Crafted attempts
to provide the bare minimum to get you started.  More like a framework
than a complete solution, Crafted Emacs intends to provide a sensible
place to start configuring your Emacs to your needs.

   Defaults provided here were provided by a community of volunteers and
ideally represent sane defaults from which to start.  We expect you to
have different opinions than ours and we expect you to implement those
differences in your own configuration.  Our intent is to provide
something you might find useful to get you started on your own Emacs
configuration journey.

* Menu:

* Goals::
* Principles::
* Why use it?::
* Customization::
* Contributing::
* Troubleshooting::
* MIT License::

— The Detailed Node Listing —

Principles

* Minimal, modular configuration: Minimal modular configuration.
* Prioritize built-in Emacs functionality::
* Can be integrated with a Guix configuration::
* Helps you learn Emacs Lisp::
* Reversible::

Customization

* Managing packages::
* Example Configuration::
* The ‘custom.el’ file: The customel file.

Managing packages

* Configuring a package manager::
* Installing packages::
* Using alternate package managers::

The ‘custom.el’ file

* Simplified overview of how Emacs Customization works::
* Loading the ‘custom.el’ file: Loading the customel file.

Troubleshooting

* A package (suddenly?) fails to work::



File: crafted-emacs.info,  Node: Goals,  Next: Principles,  Prev: Top,  Up: Top

1 Goals
*******

   • No new configuration system, macros, layers etc.  Almost everything
     is straight Emacs Lisp.
   • Provide some pre-configured modules to shorten the time it takes to
     build a nice working configuration.
   • Customizations in the modules we provide should be opt-in by
     default to avoid surprising behavior.
   • Not a turn-key/kitchen sink solution.  There will be holes the user
     must fill.
   • Fewer packages rather than more; we prefer to stay closer to
     built-in functionality as much as possible.
   • Correctness is important, as we expect people who might be new to
     Emacs Lisp to learn from what we have written.  We prefer
     ‘customize-set-variable’ instead of ‘setq’ for ‘defcustom’ values
     as an example.
   • Documentation is thorough, complete, and easy to find.  There is an
     *note info: (crafted-emacs)Top. manual for Crafted Emacs
     distributed with the source.


File: crafted-emacs.info,  Node: Principles,  Next: Why use it?,  Prev: Goals,  Up: Top

2 Principles
************

* Menu:

* Minimal, modular configuration: Minimal modular configuration.
* Prioritize built-in Emacs functionality::
* Can be integrated with a Guix configuration::
* Helps you learn Emacs Lisp::
* Reversible::


File: crafted-emacs.info,  Node: Minimal modular configuration,  Next: Prioritize built-in Emacs functionality,  Up: Principles

2.1 Minimal, modular configuration
==================================

The core configuration only sets up Emacs to have a cleaner presentation
with sensible defaults.  It is up to the user to decide which
‘crafted-*’ modules to load.

   Configuration modules depend on other modules and the base
configuration as little as possible.

   The implication is that someone should be able to install or copy
code from a ‘crafted-*’ module into their own configuration _without_
using Crafted Emacs.


File: crafted-emacs.info,  Node: Prioritize built-in Emacs functionality,  Next: Can be integrated with a Guix configuration,  Prev: Minimal modular configuration,  Up: Principles

2.2 Prioritize built-in Emacs functionality
===========================================

Where possible, we leverage built-in Emacs functionality instead of
external packages.  When we choose external packages, we prefer those
which are layered on top of existing, built-in, functionality.  For
example:

   • ‘project.el’ instead of ‘Projectile’
   • ‘tab-bar-mode’ instead of ‘Perspective.el’, ‘persp-mode’,
     ‘eyebrowse’, etc
   • ‘eglot’ instead of ‘lsp-mode’ (because ‘eglot’ prioritizes built-in
     functionality in Emacs 28, and is built-in with Emacs 29)


File: crafted-emacs.info,  Node: Can be integrated with a Guix configuration,  Next: Helps you learn Emacs Lisp,  Prev: Prioritize built-in Emacs functionality,  Up: Principles

2.3 Can be integrated with a Guix configuration
===============================================

It should be possible to customize aspects of the Crafted Emacs
configuration inside of a Guix Home configuration so that things like
font sizes, themes, etc can be system-specific.

   It can also use packages installed via the Guix package manager
instead of ‘package.el’.


File: crafted-emacs.info,  Node: Helps you learn Emacs Lisp,  Next: Reversible,  Prev: Can be integrated with a Guix configuration,  Up: Principles

2.4 Helps you learn Emacs Lisp
==============================

Instead of providing a higher-level configuration system out of the box
like other Emacs configurations, we follow standard Emacs Lisp patterns
so that you can learn by reading the configuration.  We do our best to
provide clear comments where necessary to help the reader understand our
choices and how the code works.


File: crafted-emacs.info,  Node: Reversible,  Prev: Helps you learn Emacs Lisp,  Up: Principles

2.5 Reversible
==============

We recognize not everyone will agree with our decisions, so each
customization should be easily reversible in the users configuration
file.


File: crafted-emacs.info,  Node: Why use it?,  Next: Customization,  Prev: Principles,  Up: Top

3 Why use it?
*************

Why choose this configuration over _Doom Emacs_, _Spacemacs_, _Prelude_,
or others?

   The goal of this configuration is to make it easier to write your own
Emacs configuration while using pre-made configuration parts maintained
by the community.  Instead of using a monolithic, all-encompassing
approach, we strive to ensure that all parts of this configuration are
optional or interchangeable.

   You should even be able to use the configuration modules we provide
with your own ‘init.el’ file without using this base configuration repo!


File: crafted-emacs.info,  Node: Customization,  Next: Contributing,  Prev: Why use it?,  Up: Top

4 Customization
***************

* Menu:

* Managing packages::
* Example Configuration::
* The ‘custom.el’ file: The customel file.


File: crafted-emacs.info,  Node: Managing packages,  Next: Example Configuration,  Up: Customization

4.1 Managing packages
=====================

* Menu:

* Configuring a package manager::
* Installing packages::
* Using alternate package managers::


File: crafted-emacs.info,  Node: Configuring a package manager,  Next: Installing packages,  Up: Managing packages

4.1.1 Configuring a package manager
-----------------------------------

The default package manager in _Crafted Emacs_ is the built-in
‘package.el’.  Other package managers can be used with _Crafted Emacs_,
their configuration is up to the user.

   The general process for using a package manager in Emacs is to
provide the configuration in the ‘early-init.el’ file.  This file is
used specifically to allow the user to configure various parts of Emacs
very early in the startup process.

   To configure ‘package.el’, add the following to your ‘early-init.el’
file.

     ;; This assumes you have cloned the Crafted Emacs project in the
     ;; `crafted-emacs' directory in your home folder.  Change the path
     ;; appropriately for your system.
     (load "~/crafted-emacs/modules/crafted-early-init-config")

   This code will do the following:

   • Setup the ‘package-archives’ list to include the following list of
     package repositories:
       1. *GNU Elpa* - contains packages which use the GNU GPL (GNU
          General Public License) for their license and for which the
          author has signed the copyright release to the Free Software
          Foundation.  Maintenance is by the GNU Emacs maintainers.
       2. *Non-GNU Elpa* - contains packages which may or may not use
          the GNU GPL for their license, but which the authors have not
          signed copyright release to the Free Software Foundation,
          however authors must follow a list of rules for package
          submission.  The decision to include a package is left to the
          discretion of the GNU Emacs maintainers.
       3. *MELPA Stable* - MELPA packages which have a version tag in
          their ‘git’ repository, these are pulled and built on a
          regular basis as needed when the tag version changes.
       4. *MELPA* - hosts prebuilt development packages based on the
          latest commit in the respective ‘git’ repository.  These will
          have version numbers similar to this: ‘20210701.839’ which is
          essentially a date stamp when the package was built.
   • Prioritize the list of package repositories to be in the order
     listed above.  This means, we prefer to get packages from GNU Elpa
     first, if not found, then try the next repository down the list,
     finally trying to get the package from MELPA as a last resort.
     This is because _Crafted Emacs_ prefers released versions, if
     available, for all packages installed.
   • Check to make sure the repository cache archives are up-to-date,
     and update if needed.  This check is performed when Emacs is
     starting, and will check to see if the repository cache is older
     than one day.  To check less frequently, set the variable
     ‘crafted-package-update-days’ to a higher value.  To not perform
     the check at all, set the
     ‘crafted-package-perform-stale-archive-check’ variable to ‘nil’.

     Once _Crafted Emacs_ is up and running, no stale checks are made.
     Thus, if you run _Crafted Emacs_ for several days without
     restarting Emacs, you’ll need to refresh the package repository
     archive caches manually.  This is done automatically when running
     ‘package-list-packages’.


File: crafted-emacs.info,  Node: Installing packages,  Next: Using alternate package managers,  Prev: Configuring a package manager,  Up: Managing packages

4.1.2 Installing packages
-------------------------

The standard approach to finding and installing packages is to use the
following command ‘M-x list-packages RET’, which will bring up a user
interface to search for packages, review the package details, install,
update or remove package.  For more information, see the *note Emacs
Packages Info page: (emacs)Packages.

   Additionally, _Crafted Emacs_ provides a few modules which bundle
together packages for installation.  Each of these modules simply adds
one or more package names to the ‘package-selected-packages’ list, for
example:

     ;; not all package names are shown here, the list is shortened for
     ;; brevity.
     (add-to-list 'package-selected-packages 'cape)
     (add-to-list 'package-selected-packages 'consult)
     (add-to-list 'package-selected-packages 'corfu)

   To use these modules, simply add a ‘require’ in your ‘init.el’ file.
For example, to get the list above, you would add the following:

     ;; Currently there are nine modules which provide packages, this is
     ;; just one of them.
     (require 'crafted-completion-packages)

   somewhere near the top.  After this line, you then install the
packages with the following:

     ;; adding the `:noconfirm' flag will cause all the packages listed in
     ;; the `package-selected-packages' variable to be installed without
     ;; prompting you to confirm that choice.
     (package-install-selected-packages :noconfirm)


File: crafted-emacs.info,  Node: Using alternate package managers,  Prev: Installing packages,  Up: Managing packages

4.1.3 Using alternate package managers
--------------------------------------

Not everyone will prefer to use Emacs’ built-in package manager,
‘package.el’.  Using the package bundle modules from _Crafted Emacs_ is
still possible, however, you will potentially need to iterate over the
‘package-selected-packages’ list to perform the install for your package
manager.  To help with that, the ‘crafted-package-config’ module
provides a variable to set and a function to call.

   Here is an example using ‘straight-use-package’ as the tool to
install packages:

     (setq crafted-package-installer #'straight-use-package)
     (setq crafted-package-installed-predicate #'straight--installed-p)
     (crafted-package-install-package-list)

   Note: This usage is simple in the sense full recipes are not used
when using _Crafted Emacs_ package bundle modules.  The above
essentially runs code like the following:

     (straight-use-package 'corfu)

   It is not required to use the _Crafted Emacs_ package bundle modules,
you are free to install packages in whatever manner you choose, for
example, using ‘guix-home’ to install Emacs packages from the Guix
Store.  Similarly, using ‘straight’, ‘elpaca’, ‘package-vc’ or others
can be used to install any packages you choose.  Once your packages are
installed, you can then use the _Crafted Emacs_ configuration modules.
These modules have names like ‘crafted-completion-config.el’ for
example.  Add these to your ‘init.el’ *after* installing packages.


File: crafted-emacs.info,  Node: Example Configuration,  Next: The customel file,  Prev: Managing packages,  Up: Customization

4.2 Example Configuration:
==========================

     (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
     (when (and custom-file
                (file-exists-p custom-file))
       (load custom-file nil :nomessage))

     (load "~/crafted-emacs/modules/crafted-init-config")

     (require 'crafted-completion-packages)
     (package-install-selected-packages :noconfirm)
     (require 'crafted-defaults-config)
     (require 'crafted-completion-config)


Listing 4.1: Example ‘init.el’

See the ‘examples’ folder in the git-repo for more examples.


File: crafted-emacs.info,  Node: The customel file,  Prev: Example Configuration,  Up: Customization

4.3 The ‘custom.el’ file
========================

The ‘custom.el’ file will hold the auto-generated code from the Emacs
Customization UI.

* Menu:

* Simplified overview of how Emacs Customization works::
* Loading the ‘custom.el’ file: Loading the customel file.


File: crafted-emacs.info,  Node: Simplified overview of how Emacs Customization works,  Next: Loading the customel file,  Up: The customel file

4.3.1 Simplified overview of how Emacs Customization works
----------------------------------------------------------

Customizable values are defined with the ‘defcustom’ form, and can be
customized using the Easy Customization UI.  A complete discussion is
out of scope for this document, instead see the Emacs Manual for more
information.

   There are several states a value can be in, for our purposes, we will
only consider two of them: the default state and the changed state.
These are not the "official" names but easily convey the concepts of the
variable.  If a value is in the default state, looking in the
Customization UI, the state will be listed as ‘STANDARD’.  Crafted Emacs
takes the approach of using the ‘customize-set-variable’ to update the
values defined with ‘defcustom’.  This will show the values as ‘SET for
current session only’ in the Customization UI.  This is normal since the
values are set each time Emacs starts.  They are technically "SAVED"
since they exist as emacs-lisp code, but since they are not in a
‘custom-set-variables’ form the Customization UI only sees them as "SET
for the current session only".

   A ‘SAVED and set’ value means the Customization code has written the
configuration to disk to be loaded again the next time Emacs starts.
When Emacs saves the configuration from the Customization UI, it simply
adds a couple of forms to the end of your initialization file (typically
‘init.el’), with comments warning about having more than one form with
the same name (see example below).


File: crafted-emacs.info,  Node: Loading the customel file,  Prev: Simplified overview of how Emacs Customization works,  Up: The customel file

4.3.2 Loading the ‘custom.el’ file
----------------------------------

This is important because if you, the user, wish to use the
Customization UI to configure Emacs, the customizations will (by
default) be written to the of the ‘init.el’ file in a form called
‘custom-set-variables’ and ‘custom-set-faces’.

   This snippet, added to the top of your ‘init.el’ file sets the name
of the file holding Emacs customizations to be ‘custom.el’ in the same
directory where your ‘init.el’ file resides.  Additionally, the code
checks to see if the file exists, and if so, loads it to take advantage
of the saved configuration therein.

     (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
     (when (and custom-file
                (file-exists-p custom-file))
       (load custom-file nil :nomessage))

   This is an example of what the Emacs customization file might look
like.  The values used here are just examples, you may have many more
values configured than just these.

     (custom-set-variables
      ;; custom-set-variables was added by Custom.
      ;; If you edit it by hand, you could mess it up, so be careful.
      ;; Your init file should contain only one such instance.
      ;; If there is more than one, they won't work right.
      '(column-number-mode t)
      '(fido-vertical-mode t))
     (custom-set-faces
      ;; custom-set-faces was added by Custom.
      ;; If you edit it by hand, you could mess it up, so be careful.
      ;; Your init file should contain only one such instance.
      ;; If there is more than one, they won't work right.
      )


Listing 4.2: Example auto-generated ‘custom.el’ file.


File: crafted-emacs.info,  Node: Contributing,  Next: Troubleshooting,  Prev: Customization,  Up: Top

5 Contributing
**************

Follow the Elisp Style Guide
(https://github.com/bbatsov/emacs-lisp-style-guide) when submitting pull
requests.

   This is a community-run modular Emacs configuration, for which we
appreciate feedback in the form of issues and pull requests.  Feel free
to open an issue prior to opening a pull request if you’re not certain
your idea is in the spirit of the *note Principles::.

   If you enjoy crafting your computing experience, join the
SystemCrafters (https://systemcrafters.net/) community!


File: crafted-emacs.info,  Node: Troubleshooting,  Next: MIT License,  Prev: Contributing,  Up: Top

6 Troubleshooting
*****************

Some tips when things don’t seem to work right.

* Menu:

* A package (suddenly?) fails to work::


File: crafted-emacs.info,  Node: A package (suddenly?) fails to work,  Up: Troubleshooting

6.1 A package (suddenly?) fails to work
=======================================

This scenario happened frequently when upgading to Emacs 28.  It also
may occur in other scenarios as well.  Usually, you will see some
message indicating some symbol is void or some function or command does
not exist.  More often than not, the package maintainer is using a
feature from another package which has not yet been released.  The new
feature is available in the development version of the package however.

   Here are some example issues where things went wrong:
   • Wrong number of arguments error
     (https://github.com/SystemCrafters/crafted-emacs/issues/126)
   • Example config doesn’t start
     (https://github.com/SystemCrafters/crafted-emacs/issues/132)
   • there are some bugs in package "helpful"
     (https://github.com/SystemCrafters/crafted-emacs/issues/140)

   Here are some strategies:

   • Check the code on the package source control page (ie GitHub,
     GitLab or whatever), and make sure the missing code is present on
     the ‘master’ branch.
   • Look at the code associated with the released version (you need to
     look at the most recent tag for this).  If the code is missing
     there, ask the maintainer for a new release.  Often, there are
     years between releases of Emacs packages, but that depends
     completely on the package maintainer.  Some of them release more
     frequently, others only on request.

   Once you have done the steps above, you can choose to take one of
these actions in your configuration:

   • Option 1
        • Use ‘M-x list-packages’ to display the list of packages.
        • Find the package in the list which doesn’t work for you, it
          will have either the _installed_ or _dependency_ status.
        • Press the ‘enter’ key to get more details on the package an
          look near the bottom of the metadata, you should see a line
          with "Other Versions".  Choose the development version - it
          will have a version number that looks like a date and the text
          ‘(melpa)’ next to it.  Press ‘enter’ on this version.
        • Following the step above will take you to the same package but
          from the MELPA repository, and you’ll see a button at the top
          labeled ‘Install’.  Click this button.
        • *Optionally* you can go back to the list of packages, find
          previous installed version, press the letter ’D’ and then the
          letter ’X’ to uninstall that version.
        • Restart Emacs
   • Option 2
        • Edit your ‘early-config.el’ file.
        • Near the bottom, add a line similar to this to pin the
          offending package to MELPA (make sure to replace
          _package-name_ with the name of the actual package):

               (add-to-list 'package-pinned-packages (cons 'package-name "melpa"))

        • Use ‘M-x package-list-packages’ to display the list of
          packages.
        • Find the package in the list, press the letter ’D’ and the
          letter ’X’ to uninstall that package.
        • Restart Emacs, the package should be installed from MELPA thus
          using the development version of the package instead of the
          released version.

   Regardless, always feel free to open an issue here and we can help
you out.  Please be as complete as possible in your description of the
problem.  Include any stack traces Emacs provides (ie start Emacs with:
‘emacs --debug-init’), mention the version number of the package you are
installing, and anything you might have tried but which didn’t work for
you.


File: crafted-emacs.info,  Node: MIT License,  Prev: Troubleshooting,  Up: Top

Appendix A MIT License
**********************

     Permission is hereby granted, free of charge, to any person
     obtaining a copy of this software and associated documentation
     files (the "Software"), to deal in the Software without
     restriction, including without limitation the rights to use, copy,
     modify, merge, publish, distribute, sublicense, and/or sell copies
     of the Software, and to permit persons to whom the Software is
     furnished to do so, subject to the following conditions:

     The above copyright notice and this permission notice shall be
     included in all copies or substantial portions of the Software.

     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
     EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
     MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
     NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
     HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
     WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
     DEALINGS IN THE SOFTWARE.



Tag Table:
Node: Top1410
Node: Goals3094
Node: Principles4144
Node: Minimal modular configuration4475
Node: Prioritize built-in Emacs functionality5111
Node: Can be integrated with a Guix configuration5905
Node: Helps you learn Emacs Lisp6462
Node: Reversible6997
Node: Why use it?7268
Node: Customization7943
Node: Managing packages8182
Node: Configuring a package manager8436
Node: Installing packages11849
Node: Using alternate package managers13492
Node: Example Configuration15159
Ref: org85b465b15344
Node: The customel file15877
Node: Simplified overview of how Emacs Customization works16259
Node: Loading the customel file17977
Ref: customel19150
Node: Contributing19812
Node: Troubleshooting20448
Node: A package (suddenly?) fails to work20689
Node: MIT License24477

End Tag Table


Local Variables:
coding: utf-8
End:
